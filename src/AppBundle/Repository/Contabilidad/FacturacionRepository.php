<?php

namespace AppBundle\Repository\Contabilidad;

/**
 * FacturacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FacturacionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getCotizaciones($folio)
    {
        $marinaCotizaciones = $this->getMarinaCotizacionesByFolio($folio);
        $astilleroCotizaciones = $this->getAstilleroCotizacionesByFolio($folio);

        return array_merge($marinaCotizaciones, $astilleroCotizaciones);
    }

    public function getPagosByFolioCotizacion($folio, $folioRecotizado = null)
    {
        $em = $this->getEntityManager();
        $dql = '
        SELECT 
        pagos, mhc, movimiento
        FROM AppBundle:Pago AS pagos
        LEFT JOIN pagos.mhcotizacion AS mhc
        LEFT JOIN mhc.slipmovimiento AS movimiento
        WHERE mhc.folio = :folio
        ';

        if ($folioRecotizado) {
            $dql .= 'AND mhc.foliorecotiza = :foliorecotizado';
            $query = $em->createQuery($dql)
                ->setParameter(':folio', $folio)
                ->setParameter(':foliorecotizado', $folioRecotizado);
        } else {
            $query = $em->createQuery($dql)
                ->setParameter(':folio', $folio);
        }

        return $query->getResult();
    }

    private function getMarinaCotizacionesByFolio($folio)
    {
        $em = $this->getEntityManager();
        // Consume mas recursos ??
        $dql = '
        SELECT 
        cotizacion,
        pagos,
        servicio,
        movimiento
        FROM AppBundle:MarinaHumedaCotizacion AS cotizacion
        LEFT JOIN cotizacion.pagos AS pagos
        LEFT JOIN cotizacion.mhcservicios AS servicio
        LEFT JOIN cotizacion.slipmovimiento AS movimiento
        WHERE cotizacion.validanovo = 2
        AND pagos.id IS NOT NULL
        AND pagos.factura IS NULL
        ';

        if ($folio) {
            $dql .= 'AND cotizacion.folio LIKE :folio';
            $query = $em->createQuery($dql)
                ->setParameter(':folio', "%{$folio}%");
        } else {
            $query = $em->createQuery($dql);
        }

        return $query->getResult();
    }

    private function getAstilleroCotizacionesByFolio($folio)
    {
        $em = $this->getEntityManager();
        $dql = '
        SELECT
        cotizacion,
        pagos,
        servicios,
        servicioBasico,
        servicioProducto,
        servicioRegular
        FROM AppBundle:AstilleroCotizacion AS cotizacion
        LEFT JOIN cotizacion.pagos AS pagos
        LEFT JOIN cotizacion.acservicios AS servicios
        LEFT JOIN servicios.astilleroserviciobasico AS servicioBasico
        LEFT JOIN servicios.producto AS servicioProducto
        LEFT JOIN servicios.servicio AS servicioRegular
        WHERE cotizacion.validanovo = 2
        AND pagos.id IS NOT NULL
        AND pagos.factura IS NULL
        ';

        if ($folio) {
            $dql .= 'AND cotizacion.folio LIKE :folio';
            $query = $em->createQuery($dql)
                ->setParameter(':folio', "%{$folio}%");
        } else {
            $query = $em->createQuery($dql);
        }

        return $query->getResult();
    }
}
