<?php

namespace AppBundle\Repository\Tienda;

use AppBundle\Entity\Tienda\Inventario\Registro;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * ProductoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductoRepository extends \Doctrine\ORM\EntityRepository
{
    public function findProductosLike($str)
    {
        return $this->quantityQuery()
            ->andWhere('p.nombre LIKE ?1')
            ->setParameter(1, "%{$str}%")
            ->setMaxResults(10)
            ->getQuery()
            ->getResult();
    }

    public function getProductoByBarcode($barcode)
    {
        try {
            return $this->quantityQuery()
                ->andWhere('p.codigoBarras = ?1')
                ->setParameter(1, $barcode)
                ->getQuery()
                ->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    private function quantityQuery()
    {
        return $query = $this->createQueryBuilder('p')
            ->select(
                'p.id',
                'p.nombre',
                'p.precio',
                'p.preciocolaborador',
                'p.codigoBarras',
                'COALESCE(p.existencia, 0) AS quantity'
            )
            ->where('p.isActive = 1')
            ->groupBy('p.id');
    }

    public function getProductoSelect2($query)
    {
        $builder = $this->createQueryBuilder('producto');

        return $builder
            ->select('producto.id, producto.nombre AS text, producto.existencia AS quantity')
            ->where('LOWER(producto.nombre) LIKE :query')
            ->setParameter('query', strtolower("%{$query}%"))
            ->setMaxResults(5)
            ->getQuery()
            ->getArrayResult();
    }
}
