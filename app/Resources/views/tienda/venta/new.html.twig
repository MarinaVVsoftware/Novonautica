{% extends 'estructura/plantilla.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/perfect-scrollbar.css') }}">
    <style>
        .alert {
            padding: 7px;
            margin-bottom: 5px;
        }

        .ps__rail-y {
            z-index: 10;
        }

        .panel-body {
            background-color: #373c52;
        }

        .table > tbody > tr > td > input,
        .table > tbody > tr > td > .input-group > input,
        .table > tbody > tr > td > .input-group > .input-group-addon {
            -webkit-border-radius: 0;
            -moz-border-radius: 0;
            border-radius: 0 !important;
            background-color: #3e4766;
            color: #fff;
            border: none;
        }

        .help-block {
            color: #dd4b39;
        }

        #products-pane {
            position: relative;
            height: 500px;
            width: 100%;
        }

        .discount-input[disabled],
        .discount-input[disabled] + span {
            background-color: #373c52 !important;
        }
    </style>
{% endblock %}

{% form_theme form.conceptos '/tienda/venta/form-theme/_concepto.html.twig' %}
{% form_theme form 'tienda/inventario/form-theme/_total.html.twig' %}

{% block contwrapper %}
    <div class="content-wrapper">
        <section class="content">
            <div class="row">
                <div id="errors" class="col-md-12">
                    {{ form_errors(form) }}
                </div>
            </div>
            {{ form_start(form) }}
            <div class="row">
                <div class="col-sm-12">
                    <div class="panel panel-novo">
                        <div class="panel-heading">
                            <h4 class="panel-title">Punto de venta</h4>
                        </div>
                        <div id="products-pane" class="panel-body no-padding">
                            <table class="table">
                                <thead>
                                <tr>
                                    <th width="3%" valign="middle" class="text-center">
                                        <i class="fa fa-trash-o" aria-hidden="true"></i>
                                    </th>
                                    <th width="35%">Producto</th>
                                    <th>Cantidad</th>
                                    <th width="10%">% Desc.</th>
                                    <th>Precio</th>
                                    <th>Subtotal</th>
                                    <th>IVA</th>
                                    <th>Total</th>
                                </tr>
                                </thead>
                                <tbody id="conceptos"
                                       data-prototype="{{ form_widget(form.conceptos.vars.prototype)|e('html_attr') }}">
                                {% for concepto in form.conceptos %}
                                    <tr class="servicio-agregado table-item">
                                        <td valign="middle" class="text-center">
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.producto) }}
                                            {{ form_errors(concepto.producto) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.cantidad) }}
                                            {{ form_errors(concepto.cantidad) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.descuento) }}
                                            {{ form_errors(concepto.descuento) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.precioUnitario, {'attr': {'readonly': 'readonly'}}) }}
                                            {{ form_errors(concepto.precioUnitario) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.subtotal, {'attr': {'readonly': 'readonly'}}) }}
                                            {{ form_errors(concepto.subtotal) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.iva, {'attr': {'readonly': 'readonly'}}) }}
                                            {{ form_errors(concepto.iva) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.total, {'attr': {'readonly': 'readonly'}}) }}
                                            {{ form_errors(concepto.total) }}
                                        </td>
                                    </tr>
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                        <div class="panel-footer">
                            <div class="row">
                                <div class="col-sm-3">
                                    <a href="#" id="add" class="btn btn-block btn-contorno-azul pull-right">
                                        + Producto
                                    </a>
                                </div>
                                <div class="col-sm-3">
                                    {{ form_row(form.cliente) }}
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <select id="price-selector" class="form-control"
                                                style="width: inherit; margin-left: 1rem;">
                                            <option>Seleccione el tipo de precio</option>
                                            <option value="0" selected>PÃºblico</option>
                                            <option value="1">Colaborador</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="panel panel-novo">
                        <div class="panel-body" style="min-height: initial;">
                            <div class="row text-right">
                                <div class="col-sm-3">
                                    <h4 class="letra-azul">Descuento</h4>
                                    <hr>
                                    {{ form_row(form.descuento) }}
                                </div>
                                <div class="col-sm-3">
                                    <h4 class="letra-azul">Subtotal</h4>
                                    <hr>
                                    {{ form_row(form.subtotal) }}
                                </div>
                                <div class="col-sm-3">
                                    <h4 class="letra-azul">IVA</h4>
                                    <hr>
                                    {{ form_row(form.iva) }}
                                </div>
                                <div class="col-sm-3">
                                    <h4 class="letra-azul">Total</h4>
                                    <hr>
                                    {{ form_row(form.total) }}
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <a href="#" id="submit-btn" class="btn btn-azul pull-right">
                                        Guardar
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {{ form_end(form) }}
        </section>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/perfect-scrollbar.min.js') }}"></script>
    <script type="text/javascript">
      (($) => {
            const body = document.querySelector('body');
            const ventaForm = document.querySelector('form[name="appbundle_tienda_venta"]');
            const SubmitButton = document.getElementById('submit-btn');
            const AddButton = document.getElementById('add');
            const PriceSelect = document.getElementById('price-selector');
            const EntradasHolder = document.getElementById('conceptos');
            const ClienteSelect = document.getElementById('appbundle_tienda_venta_cliente');
            const DescuentoInput = document.getElementById('appbundle_tienda_venta_descuento');
            const SubtotalInput = document.getElementById('appbundle_tienda_venta_subtotal');
            const IvaInput = document.getElementById('appbundle_tienda_venta_iva');
            const TotalInput = document.getElementById('appbundle_tienda_venta_total');
            const ProductosPane = document.getElementById('products-pane');
            const IVA = .16;

            let counter = EntradasHolder.childElementCount;

            $(ClienteSelect).select2({ajax: {url: 'clientes'}});

            /**
             * Da formato a un numero en decimales y reduce sus decimales a 2
             */
            function transformToMoneyFormat(numero) {
              return numero
                  .replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
            }

            /**
             * Retorna el mapeo del producto recibido por json
             */
            function getProducto(producto) {
              return {
                id: producto.id,
                text: producto.nombre,
                price: {
                  public: (producto.precio / 100),
                  colaborator: (producto.precioColaborador / 100) || (producto.preciocolaborador / 100) || 999999
                },
                barcode: producto.codigoBarras,
                quantity: producto.quantity,
              }
            }

            /**
             * Transforma un select en un tipo select2 que saca lo datos de productos.json
             */
            function addSelect2(select) {
              let $select = $(select);

              $select
                  .select2({
                    placeholder: 'Seleccione un producto',
                    ajax: {
                      url: 'productos',
                      dataType: 'json',
                      processResults(response) {
                        return {
                          results: response.results.map((result) => getProducto(result)),
                        }
                      }
                    },
                  });


              return $select;
            }

            /**
             * Crea una fila en la tabla de entradas con un boton que la remueve
             */
            function createRow() {
              let prototipo = EntradasHolder.dataset.prototype.replace(/__name__/g, counter);

              let tempTable = document.createElement('table');
              tempTable.innerHTML = prototipo;

              let row = tempTable.querySelector('tr');

              addRowListeners(row);
              addRowRemove(row);

              EntradasHolder.appendChild(row);
              counter++;

              return row;
            }

            /**
             * Agrega las funciones de busqueda por producto, calculo de cantidad por precio unitario del producto
             */
            function addRowListeners(row) {
              const $ProductSelect = addSelect2(row.cells[1].querySelector('select'));
              const $Row = $(row);
              const $QuantityInput = $Row.find('[type="number"]');
              const $DiscountInput = $Row.find('.discount-input');
              const $MoneyInputs = $Row.find('.money-input');
              const PrecioInput = $MoneyInputs[0];
              const SubtotalInput = $MoneyInputs[1];
              const IvaInput = $MoneyInputs[2];
              const TotalInput = $MoneyInputs[3];

              function computeRowValues(event) {
                event.target.value = event.target.value.replace(/[^\d.]/g, '');

                if (!event.target.value) return;

                const Cantidad = Number($QuantityInput.val());
                const Descuento = (Number($DiscountInput.val()) / 100);
                const Precio = Number(PrecioInput.value.replace(/[^\d.]/g, ''));

                let subtotal = (Cantidad * Precio);
                let iva = (subtotal * IVA);

                if (Descuento) {
                  subtotal = subtotal - (subtotal * Descuento);
                  iva = iva - (iva * Descuento);
                }

                SubtotalInput.value = transformToMoneyFormat(subtotal.toFixed(2));
                IvaInput.value = transformToMoneyFormat(iva.toFixed(2));
                TotalInput.value = transformToMoneyFormat((subtotal + iva).toFixed(2));

                computeTotalValues();
              }

              $ProductSelect
                  .on('select2:select', function (event) {
                    const producto = event.params.data;

                    if (producto.quantity <= 0) {
                      throwAlert(`El producto "${producto.text}" no tiene mÃ¡s stock en el inventario`, 'danger');

                      $(this).val(null).trigger('change');
                      $QuantityInput.val(0).trigger('input');
                      PrecioInput.value = '0.00';
                      $(this).select2('open');

                      return false;
                    }

                    const price = PriceSelect.value === '0' ? producto.price.public : producto.price.colaborator;

                    $QuantityInput.attr('max', producto.quantity);
                    PrecioInput.dataset.public = producto.price.public;
                    PrecioInput.dataset.colaborator = producto.price.colaborator;
                    PrecioInput.value = transformToMoneyFormat(price.toFixed(2));
                    $QuantityInput.val(1).trigger('input');
                    $QuantityInput.focus();

                    throwAlert(`El producto "${producto.text}" tiene ${producto.quantity} de existencÃ­a${producto.quantity > 1 ? 's' : ''} en el inventario`, 'success');
                  });

              $QuantityInput.on('input', computeRowValues);
              $DiscountInput.on('input', computeRowValues);
            }

            /**
             * Cicla a traves de cada columna con un valor y la suma
             */
            function computeTotalValues() {

              let totalValues = Array
                  .from(EntradasHolder.querySelectorAll('tbody tr'))
                  .reduce(function (a, b) {
                    let quantity = Number(getInput(b.cells[2]).value);
                    let price = Number(getInput(b.cells[4]).value.replace(/[^\d.]/g, ''));
                    let descuento = (quantity * price) * (Number(getInput(b.cells[3]).value) / 100);

                    return {
                      descuento: a.descuento + descuento,
                      subtotal: a.subtotal + Number(getInput(b.cells[5]).value.replace(/,/g, '')),
                      iva: a.iva + Number(getInput(b.cells[6]).value.replace(/,/g, '')),
                      total: a.total + Number(getInput(b.cells[7]).value.replace(/,/g, '')),
                    }
                  }, {
                    descuento: 0,
                    subtotal: 0,
                    iva: 0,
                    total: 0,
                  });

              DescuentoInput.value = transformToMoneyFormat(totalValues.descuento.toFixed(2));
              SubtotalInput.value = transformToMoneyFormat(totalValues.subtotal.toFixed(2));
              IvaInput.value = transformToMoneyFormat(totalValues.iva.toFixed(2));
              TotalInput.value = transformToMoneyFormat(totalValues.total.toFixed(2));

              function getInput(cell) {
                return cell.querySelector('input');
              }
            }

            /**
             * Agrega un boton para remover su propia row
             */
            function addRowRemove(row) {
              let celda = row.cells[0];
              let removeButton = document.createElement('a');

              removeButton.className = 'badge btn-xs btn-naranja';
              removeButton.innerHTML = '<i class="fa fa-times"></i>';
              removeButton.addEventListener('click', (event) => {
                event.preventDefault();
                event.stopPropagation();

                removeButton.parentNode.parentNode.remove(removeButton);
                computeTotalValues();
              });

              celda.appendChild(removeButton);
            }

            /**
             * Agrega una fila que fue escaneada por una pistola de barcodes
             */
            function addProductProgrammatically(event) {
              $.ajax(
                  'producto/' + event.detail,
                  {
                    success(producto) {
                      if (producto.quantity <= 0) {
                        throwAlert(`El producto "${producto.nombre}" no mÃ¡s tiene stock en el inventario.`, 'danger');
                        return;
                      }

                      let existingOption = EntradasHolder.querySelector(`option[value="${producto.id}"]`);

                      if (existingOption) {
                        let row = existingOption.parentNode.parentNode.parentNode;
                        let quantityInput = row.cells[2].querySelector('input');
                        let priceInput = row.cells[4].querySelector('input');
                        let product = getProducto(producto);
                        let price = PriceSelect.value === '0' ? product.price.public : product.price.colaborator;

                        priceInput.value = transformToMoneyFormat(price.toFixed(2));
                        quantityInput.value = Number(quantityInput.value) + 1;
                        quantityInput.dispatchEvent(new Event('input'));
                        return;
                      }

                      let row = createRow();
                      let $select = $(row.cells[1].querySelector('select'));
                      let option = new Option(producto.nombre, producto.id, true, true);

                      $select.append(option);
                      $select.trigger({
                        type: 'select2:select',
                        params: {
                          data: getProducto(producto),
                        }
                      });

                      throwAlert(`El producto "${producto.text}" tiene ${producto.quantity} de existencÃ­a${producto.quantity > 1 ? 's' : ''} en el inventario`, 'success');
                    },
                    error(response) {
                      if (response.status !== 404) return;
                      throwAlert(`El producto "${event.detail}" no existe en la base de datos`, 'error');
                    },
                  }
              );
            }

            class BarcodeScanerEvent {
              constructor(inputString = '', timeoutHandler = 0) {
                document.addEventListener(
                    'keyup',
                    this._keyupHandler.bind(this)
                );

                this.inputString = inputString;
                this.timeoutHandler = timeoutHandler;
              }

              _keyupHandler(event) {
                if (this.timeoutHandler) {
                  window.clearTimeout(this.timeoutHandler);
                }

                this.inputString += String.fromCharCode(event.which) === '(' ? '' : String.fromCharCode(event.which);

                this.timeoutHandler = setTimeout(() => {
                  if (this.inputString.length <= 4) {
                    this.inputString = '';
                    return;
                  }

                  document.dispatchEvent(this._event());
                  this.inputString = '';
                }, 15);
              }

              _event() {
                return new CustomEvent('scanedbarcode', {detail: this.inputString})
              }
            }

            new BarcodeScanerEvent();
            new PerfectScrollbar(ProductosPane);

            PriceSelect
                .addEventListener('change', () => {
                  PriceSelect.blur();

                  EntradasHolder
                      .querySelectorAll('tbody tr')
                      .forEach((row) => {
                        let quantityInput = row.querySelector('td:nth-child(3) input');
                        let priceInput = row.querySelector('td:nth-child(5) input');
                        let price = PriceSelect.value === '0' ? priceInput.dataset.public : priceInput.dataset.colaborator;

                        priceInput.value = transformToMoneyFormat(Number(price).toFixed(2));
                        quantityInput.dispatchEvent(new Event('input'));
                      });

                });

            AddButton
                .addEventListener('click', (event) => {
                  event.preventDefault();
                  event.stopPropagation();

                  $(createRow().cells[1].querySelector('select')).select2('open');
                });

            SubmitButton
                .addEventListener('click', (event) => {
                  event.preventDefault();
                  event.stopPropagation();

                  $('<input type="submit" class="hidden">')
                      .appendTo(ventaForm)
                      .click()
                      .remove();

                  if (ventaForm.checkValidity()) {
                    ventaForm.submit();
                  }
                });

            EntradasHolder
                .querySelectorAll('tr')
                .forEach((row) => {
                  addRowListeners(row);
                  addRowRemove(row);
                });

            document
                .addEventListener('scanedbarcode', addProductProgrammatically);

            body.addEventListener('keyup', function (event) {
              if (event.keyCode === 16) {
                AddButton.click();
                return;
              }

              return;
            });
          }

      )(jQuery);
    </script>
{% endblock %}
