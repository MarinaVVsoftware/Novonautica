{% extends 'estructura/plantilla.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .help-block {
            color: #dd4b39;
        }

        .autocomplete-suggestions {
            background: #3e4766;
            overflow: auto;
            width: auto !important;
            min-width: 100px;
            max-width: 300px;
        }

        .autocomplete-suggestion {
            padding: 2px 5px;
            white-space: nowrap;
            overflow: hidden;

        }

        .autocomplete-selected {
            background: #0097f6;
        }

        .autocomplete-suggestions strong {
            font-weight: normal;
            color: #3399FF;
        }

        .autocomplete-suggestion:hover strong {
            color: #363c52;
        }

        .autocomplete-group {
            padding: 2px 5px;
        }

        .autocomplete-group strong {
            display: block;
            border-bottom: 1px solid #000;
        }

        .autocomplete-suggestions {
            text-align: left;
            cursor: default;
            border: 1px solid #ccc;
            border-top: 0;
            background: #fff;
            box-shadow: -1px 1px 3px rgba(0, 0, 0, .1);

            /* core styles should not be changed */
            position: absolute;
            display: none;
            z-index: 9999;
            max-height: 254px;
            overflow: hidden;
            overflow-y: auto;
            box-sizing: border-box;
        }

        .autocomplete-suggestion {
            position: relative;
            padding: 0 .6em;
            line-height: 23px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 1.02em;
            color: #333;
        }

        .autocomplete-suggestion b {
            font-weight: normal;
            color: #1f8dd6;
        }

        .autocomplete-suggestion.selected {
            background: #f0f0f0;
        }

        .novo-checkbox-container .checkbox {
            position: relative;
            padding: 20px 0 20px 20px;
            text-align: left;
        }

        .novo-checkbox-container .checkbox label {
            cursor: pointer;
            padding-left: 10px;
        }

        .novo-checkbox-container .checkbox label:before,
        .novo-checkbox-container .checkbox label:after {
            content: '';
            position: absolute;
            top: 50%;
        }

        .novo-checkbox-container .checkbox label:before {
            left: 0;
            width: 20px;
            height: 20px;
            margin: -10px 0 0;
            border-radius: 4px;
            background: #3e4766;
            -webkit-box-shadow: 0 0 1px grey;
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.5), 0 1px 0 rgba(255, 255, 255, 0.4);
        }

        .novo-checkbox-container .checkbox label:after {
            width: 14px;
            height: 8px;
            top: 24px;
            left: 3px;
            border: 3px solid #0097f6;
            border-top: none;
            border-right: none;
            background: transparent;
            opacity: 0;
            -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg);
        }

        .novo-checkbox-container .checkbox label:hover:after {
            opacity: .5;
        }

        .novo-checkbox-container .checkbox input[type="radio"],
        .novo-checkbox-container .checkbox input[type="checkbox"] {
            position: absolute;
            top: 0;
            left: -9999px;
            visibility: hidden;
        }

        .novo-checkbox-container .checkbox input[type="radio"]:checked + label:after,
        .novo-checkbox-container .checkbox input[type="checkbox"]:checked + label:after {
            opacity: 1;
        }

        .table {
            margin-bottom: 0;
        }

        .table > thead > tr > th,
        .table > tbody > tr > td {
            padding: 0;
            text-align: center;
            vertical-align: middle;
        }

        .content form .table > tbody > tr > td > input.form-control,
        .content form .table > tbody > tr > td > select {
            border-radius: 0 !important;
        }
    </style>
{% endblock %}

{% form_theme form.conceptos 'contabilidad/facturacion/form-themes/_concepto.html.twig' %}

{% block contwrapper %}
    <div class="content-wrapper">
        <section class="content">

            <div class="row">
                <div class="col-md-12">
                    {% for message in app.flashes('danger') %}
                        <div class="alert alert-danger">
                            {{ message }}
                        </div>
                    {% endfor %}
                    {% for error in form.vars.errors %}
                        <div class="alert alert-danger">
                            {{ error.message }}
                        </div>
                    {% endfor %}
                </div>
            </div>

            {{ form_start(form) }}
            <div class="row">
                <div class="col-sm-12">
                    <div class="panel panel-novo">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                Nueva factura
                                <span id="factura-folio" class="pull-right">Folio: {{ form.folio.vars.value }}</span>
                            </h4>
                        </div>
                        <div class="panel-body" style="min-height: initial">
                            <div class="row">
                                <div class="col-sm-4">
                                    {{ form_row(form.emisor) }}
                                </div>
                                <div class="col-sm-4">
                                    {{ form_row(form.cliente) }}
                                </div>
                                <div class="col-sm-4">
                                    {{ form_row(form.receptor) }}
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    {{ form_row(form.fechaFiltro) }}
                                </div>
                                <div class="col-sm-4">
                                    {{ form_row(form.cotizaciones) }}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="panel panel-novo">
                        <div class="panel-body" style="min-height: initial">
                            <div class="row">
                                <div class="col-sm-3">
                                    {{ form_row(form.lugarExpedicion) }}
                                </div>
                                <div class="col-sm-3">
                                    {{ form_row(form.metodoPago) }}
                                </div>
                                <div class="col-sm-3">
                                    {{ form_row(form.tipoComprobante) }}
                                </div>
                                <div class="col-sm-3">
                                    {{ form_row(form.formaPago) }}
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-3">
                                    {{ form_row(form.moneda) }}
                                </div>
                                <div class="col-sm-3">
                                    {{ form_row(form.tipoCambio) }}
                                </div>
                                <div class="col-sm-3">
                                    {{ form_row(form.condicionesPago) }}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="panel panel-novo">
                        <div class="panel-heading">
                            <div class="row">
                                <div class="col-sm-12">
                                    <h4 class="panel-title">
                                        <small>Conceptos</small>
                                        <button id="add" type="button" class="btn btn-contorno-azul pull-right">
                                            + Agregar concepto
                                        </button>
                                    </h4>
                                </div>
                            </div>
                        </div>
                        <div class="panel-body no-padding" style="min-height: initial;">
                            <table class="table table-novo">
                                <thead>
                                <tr>
                                    <th width="1%">Cantidad</th>
                                    <th width="1%">Unidad</th>
                                    <th width="10%">ClaveProdServ</th>
                                    <th width="10%">Clave unidad</th>
                                    <th width="10%">Descripcion</th>
                                    <th>Valor Unitario</th>
                                    <th>Importe</th>
                                    <th>Base</th>
                                    <th width="1%">Impuesto</th>
                                    <th width="2%">Factor</th>
                                    <th>Valor de factor</th>
                                    <th>Importe de impuesto</th>
                                    <th width="1%"></th>
                                </tr>
                                <tr>
                                    <th colspan="7">Concepto</th>
                                    <th colspan="6">Impuestos</th>
                                </tr>
                                </thead>
                                <tbody id="prototype-holder"
                                       data-prototype="{{ form_widget(form.conceptos.vars.prototype)|e('html_attr') }}">
                                {% for concepto in form.conceptos %}
                                    <tr class="concepto-agregado table-item">
                                        <td>
                                            {{ form_widget(concepto.cantidad) }}
                                            {{ form_errors(concepto.cantidad) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.unidad) }}
                                            {{ form_errors(concepto.unidad) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.claveProdServ) }}
                                            {{ form_errors(concepto.claveProdServ) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.claveUnidad) }}
                                            {{ form_errors(concepto.claveUnidad) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.descripcion) }}
                                            {{ form_errors(concepto.descripcion) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.valorunitario) }}
                                            {{ form_errors(concepto.valorunitario) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.importe) }}
                                            {{ form_errors(concepto.importe) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.base) }}
                                            {{ form_errors(concepto.base) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.impuesto) }}
                                            {{ form_errors(concepto.impuesto) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.tipoFactor) }}
                                            {{ form_errors(concepto.tipoFactor) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.tasaOCuota) }}
                                            {{ form_errors(concepto.tasaOCuota) }}
                                        </td>
                                        <td>
                                            {{ form_widget(concepto.impuestoImporte) }}
                                            {{ form_errors(concepto.impuestoImporte) }}
                                        </td>
                                        <td valign="middle" class="text-center">
                                            {{ form_widget(concepto.producto) }}
                                            {{ form_errors(concepto.producto) }}
                                            {{ form_widget(concepto.productoRemover) }}
                                            {{ form_errors(concepto.productoRemover) }}
                                        </td>
                                    </tr>
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="panel panel-novo">
                        <div class="panel-body" style="min-height: initial;">
                            <div class="col-sm-12">
                                <div class="row">
                                    <h4>Impuestos totales</h4>
                                    <div class="col-sm-2">
                                        {{ form_row(form.impuesto) }}
                                    </div>
                                    <div class="col-sm-2">
                                        {{ form_row(form.tipoFactor) }}
                                    </div>
                                    <div class="col-sm-2">
                                        {{ form_row(form.tasa) }}
                                    </div>
                                    <div class="col-sm-3">
                                        {{ form_row(form.importe) }}
                                    </div>
                                    <div class="col-sm-3">
                                        {{ form_row(form.totalImpuestosTransladados) }}
                                    </div>
                                </div>
                                <div class="row">
                                    <h4>Totales</h4>
                                    <div class="col-sm-3 col-sm-offset-6">
                                        {{ form_row(form.subtotal) }}
                                    </div>
                                    <div class="col-sm-3">
                                        {{ form_row(form.total) }}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel-footer">
                            <div class="row">
                                <div class="col-md-12">
                                    <button type="submit" class="btn btn-azul pull-right">
                                        Facturar
                                    </button>
                                    <button id="preview-btn"
                                            type="button"
                                            class="btn btn-contorno-azul">
                                        Preview
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {{ form_end(form) }}

        </section>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/reliableRounding.js') }}"></script>
    <script src="{{ asset('js/cleave.min.js') }}"></script>
    <script src="{{ asset('js/auto-complete.min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bower_components/moment/min/moment.min.js') }}"></script>
    <script type="text/javascript"
            src="{{ asset('bower_components/bootstrap-datepicker/dist/locales/bootstrap-datepicker.es.min.js') }}"></script>
    <script>
      class ElementCollection {
        constructor(addButton, prototypeHolder, elementListener) {
          this.addButton = typeof addButton === 'string'
              ? document.querySelector(addButton)
              : addButton;

          this.prototypeHolder = typeof prototypeHolder === 'string'
              ? document.querySelector(prototypeHolder)
              : prototypeHolder;

          this.elementListener = elementListener;

          Array
              .from(this.prototypeHolder.querySelectorAll('tr'))
              .forEach(element => {
                this.appendRemoveButton(element);
                this.elementListener(element);
              });

          this.elementCounter = this.prototypeHolder.childElementCount;

          this.addButton
              .addEventListener(
                  'click',
                  this.addElement.bind(this)
              );
        }

        /* PUBLIC */
        addElement(event) {
          if (event) {
            event.preventDefault();
            event.stopPropagation();
          }

          let element = this._getPrototypeElement();

          this.appendRemoveButton(element);
          this.elementListener(element, event);
          this.prototypeHolder.appendChild(element);

          return this.prototypeHolder.children[this.prototypeHolder.children.length - 1];
        }

        clear() {
          this.prototypeHolder.innerHTML = '';
        }

        removeElement(element) {
          element = typeof element === 'number' ? this.prototypeHolder.children[(element - 1)] : element;
          if (!element) throw new Error('No existe el elemento que quieres eliminar');
          element.parentNode.removeChild(element);
        }

        appendRemoveButton(element) {
          let celda = element.cells[element.cells.length - 1];
          let removeButton = document.createElement('a');

          removeButton.className = 'badge btn-xs btn-naranja';
          removeButton.innerHTML = '<i class="fa fa-trash"></i>';
          removeButton.addEventListener('click', (event) => {
            event.preventDefault();
            event.stopPropagation();

            this.removeElement(removeButton.parentNode.parentNode)
          });

          celda.appendChild(removeButton);
        }

        /* PRIVATE */

        _getPrototypeElement() {
          let prototipo = this.prototypeHolder
              .dataset
              .prototype
              .replace(/__name__/g, this.elementCounter);

          let tempElement = document.createElement('table');
          tempElement.innerHTML = prototipo;
          let element = tempElement.querySelector('tr');

          this.elementCounter++;

          return element;
        }
      }
    </script>
    <script>
      (function ($) {
        const loadingState = document.getElementById('loading');
        const previewButton = document.getElementById('preview-btn');
        const facturaForm = document.querySelector('[name="appbundle_contabilidad_facturacion"]');
        const dateInput = document.getElementById('appbundle_contabilidad_facturacion_fechaFiltro');
        const cotizacionSelect = document.getElementById('appbundle_contabilidad_facturacion_cotizaciones');
        const folioInput = document.getElementById('appbundle_contabilidad_facturacion_folio');
        const clienteSelect = document.getElementById('appbundle_contabilidad_facturacion_cliente');
        const emisorSelect = document.getElementById('appbundle_contabilidad_facturacion_emisor');
        const receptorSelect = document.getElementById('appbundle_contabilidad_facturacion_receptor');
        const metodoPagoSelect = document.getElementById('appbundle_contabilidad_facturacion_metodoPago');
        const formaPagoSelect = document.getElementById('appbundle_contabilidad_facturacion_formaPago');
        const folioContainer = document.getElementById('factura-folio');

        const conceptoTable = new ElementCollection('#add', '#prototype-holder', elementListener);

        const $clienteSelect2 = $(clienteSelect).select2({ajax: {url: 'clientes'}});
        const $receptorSelect2 = $(receptorSelect).select2();

        const subtotalInput = new Cleave('#appbundle_contabilidad_facturacion_subtotal', {numeral: true});
        const totalInput = new Cleave('#appbundle_contabilidad_facturacion_total', {numeral: true});

        const totalImporteImpuestosInput = new Cleave('#appbundle_contabilidad_facturacion_importe', {numeral: true});
        const totalImpuestosInput = new Cleave('#appbundle_contabilidad_facturacion_totalImpuestosTransladados', {numeral: true});

        const $dateInputPicker = $(dateInput)
            .datepicker({
              orientation: 'bottom',
              format: 'MM yyyy',
              viewMode: 'months',
              minViewMode: 'months',
            });

        // Incializacion

        if (!dateInput.value) {
          $dateInputPicker.datepicker('setDate', new Date());
        }

        document.addEventListener('keydown', (e) => e.keyCode === 13 ? event.preventDefault() : '');

        getFolio();

        function elementListener(element) {
          /**
           * Elementos
           */
          element.connectedNodes = {};

          element.connectedNodes.cantidadInput = element.cells[0].firstElementChild;
          element.connectedNodes.unidadInput = element.cells[1].firstElementChild;
          element.connectedNodes.claveProdServSelect2 = $(element.cells[2].firstElementChild).select2({ajax: {url: '../claves-sat/select2/claveprodserv'}});
          element.connectedNodes.claveUnidadSelect2 = $(element.cells[3].firstElementChild).select2({ajax: {url: '../claves-sat/select2/claveunidad'}});
          element.connectedNodes.valorUnitarioInput = new Cleave(element.cells[5].firstElementChild, {numeral: true});
          element.connectedNodes.importeInput = new Cleave(element.cells[6].firstElementChild, {numeral: true});
          element.connectedNodes.baseInput = new Cleave(element.cells[7].firstElementChild, {numeral: true});
          element.connectedNodes.valorFactorInput = element.cells[10].firstElementChild;
          element.connectedNodes.impuestoImporteInput = new Cleave(element.cells[11].firstElementChild, {numeral: true});
          element.connectedNodes.conceptoIdHiddenInput = element.cells[12].children[0];
          element.connectedNodes.cantidadHiddenInput = element.cells[12].children[1];
          element.connectedNodes.deleteButton = element.cells[12].children[2];
          element.connectedNodes.descripcionInput = element.cells[4].firstElementChild;

          /**
           * Funciones
           */
          const computeConcepto = function (event) {
            const cantidad = Number(element.connectedNodes.cantidadInput.value);
            const valorUnitario = Number(element.connectedNodes.valorUnitarioInput.getRawValue());
            const importeAndBase = Math.round10(cantidad * valorUnitario, -2);
            const valorFactor = Math.round10(importeAndBase * Number(element.connectedNodes.valorFactorInput.value), -2);

            element.connectedNodes.importeInput.setRawValue(importeAndBase);
            element.connectedNodes.baseInput.setRawValue(importeAndBase);
            element.connectedNodes.impuestoImporteInput.setRawValue(valorFactor);

            computeConceptos();
          };

          new autoComplete({
            selector: element.cells[4].firstElementChild,
            source(term, response) {
              $.getJSON('sugerencias', {q: term}, ({results}) => {
                response(results);
              });
            },
            renderItem(item, term) {
              term = term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
              return `<div class="autocomplete-suggestion"
                data-cps-id="${item.cpsId}" data-cps-text="${item.cpsDescripcion}"
                data-cu-id="${item.cuId}" data-cu-text="${item.cuDescripcion}"
                data-val="${item.text}">
                  ${item.text.replace(new RegExp(`(${term.split(' ').join('|')})`, 'gi'), '<b>$1</b>')}
                </div>`;
            },
            onSelect(event, term, item) {
              const claves = item.dataset;
              element.connectedNodes.claveProdServSelect2
                  .append(new Option(claves.cpsText, claves.cpsId, true, true)).trigger('select');
              element.connectedNodes.claveUnidadSelect2
                  .append(new Option(claves.cuText, claves.cuId, true, true)).trigger('select');
            }
          });

          /**
           * LISTENERS
           */
          element.connectedNodes.deleteButton.addEventListener('click', computeConceptos);

          // Lectura de cantidad y valor unitario para calculo de importe/base
          element.connectedNodes.valorUnitarioInput.element.addEventListener('input', computeConcepto);
          element.connectedNodes.cantidadInput.addEventListener('input', computeConcepto);

          return element;
        }

        /**
         * LISTENERS
         */
        metodoPagoSelect.addEventListener('change', function () {
          if (this.value === 'PUE') {
            formaPagoSelect.value = '01';
          } else {
            formaPagoSelect.value = '99';
          }
        });

        emisorSelect.addEventListener('change', getFolio);

        $clienteSelect2.on('select2:select', function () {
          $receptorSelect2.empty();
          conceptoTable.clear();

          loadingState.style.display = 'block';

          $.get('clientes/rfc', {q: this.value})
              .done(({results}) => {
                results.forEach(result => {
                  $receptorSelect2.append(new Option(result.text, result.id, false, false));
                });

                $receptorSelect2.trigger('change');
              })
              .always(() => {
                loadingState.style.display = 'none';
              });

          getCotizaciones(emisorSelect.value, this.value);

        });

        $dateInputPicker.on('changeDate', function () {
          getCotizaciones(emisorSelect.value, $clienteSelect2.val());
        });

        /**
         * Al seleccionar una cotizacion, se buscan todos los conceptos de esta y se agrega una fila con los datos
         * que cada concepto incluya
         */
        cotizacionSelect.addEventListener('change', function () {
          // La tabla se tiene que limpiar cada vez que cambie el select de cotizaciones cambie de valor
          conceptoTable.clear();

          if (!this.value) return;

          loadingState.style.display = 'block';

          $.get('conceptos',
              {
                e: emisorSelect.value,
                c: this.value,
                m: moment($dateInputPicker.datepicker('getDate')).format('YYYY-MM-DD')
              }
          ).done(({results}) => {
            if (!results.length) {
              throwAlert('Este cotización no tiene conceptos, por favor verifica que la cotización se haya generado correctamente', 'danger');
              return;
            }

            for (const result of results) {
              const conceptoImporte = (Number(result.conceptoImporte) / 1.16);
              const conceptoValorUnitario = (conceptoImporte / result.conceptoCantidad);
              const conceptoIVA = (conceptoImporte * .16);

              const element = conceptoTable.addElement();
              const connectedNodes = element.connectedNodes;

              connectedNodes.cantidadInput.setAttribute('readonly', 'readonly');
              connectedNodes.cantidadInput.value = result.conceptoCantidad;

              connectedNodes.unidadInput.value = result.conceptoUnidad || result.cuDescripcion || 'NA';
              connectedNodes.descripcionInput.value = result.conceptoDescripcion;
              connectedNodes.valorUnitarioInput.setRawValue(conceptoValorUnitario / 100);
              connectedNodes.importeInput.setRawValue(conceptoImporte / 100);
              connectedNodes.baseInput.setRawValue(conceptoImporte / 100);
              connectedNodes.impuestoImporteInput.setRawValue(conceptoIVA / 100);
              connectedNodes.conceptoIdHiddenInput = result.productoId || 0;
              connectedNodes.cantidadHiddenInput = result.conceptoCantidad;

              if (result.cpsId && result.cpsDescripcion) {
                element.connectedNodes.claveProdServSelect2
                    .append(new Option(result.cpsDescripcion, result.cpsId, true, true))
                    .trigger('change');
              }

              if (result.cuId && result.cuDescripcion) {
                element.connectedNodes.claveUnidadSelect2
                    .append(new Option(result.cuDescripcion, result.cuId, true, true))
                    .trigger('change');
              }

            }

          }).always(() => {
            computeConceptos();

            loadingState.style.display = 'none';
            const selectedOption = cotizacionSelect.options[cotizacionSelect.selectedIndex];

            if (!selectedOption.dataset.requerirFactura) return;

            const clienteNombre = selectedOption.dataset.clienteNombre.substring(0, 20);
            const clienteId = selectedOption.dataset.clienteId;

            throwAlert(
                `El cliente <a href="../../cliente/${clienteId}" target="_blank">${clienteNombre}...</a>
                 de la cotización seleccionada solicito factura pero no ha registrado datos de facturación en el sistema.`,
                'warning'
            )
          });
        });

        previewButton.addEventListener('click', function () {
          facturaForm.setAttribute('action', 'preview');
          facturaForm.setAttribute('target', '_blank');
          facturaForm.submit();

          facturaForm.removeAttribute('target');
          facturaForm.removeAttribute('action');
        });

        // Funciones

        function getFolio() {
          cotizacionSelect.innerHTML = '';
          document.getElementById('errors').innerHTML = '';
          conceptoTable.clear();
          computeConceptos();

          if (clienteSelect.value) {
            getCotizaciones(emisorSelect.value, clienteSelect.value);
          }

          loadingState.style.display = 'block';

          $.get('get-folio', {e: emisorSelect.value})
              .done(({results}) => {
                folioContainer.innerText = 'Folio: ' + results.folio;
                folioInput.value = results.folio;
              })
              .always(() => {
                loadingState.style.display = 'none';
              });
        }

        function getCotizaciones(emisor, cliente) {
          loadingState.style.display = 'block';
          cotizacionSelect.innerHTML = '';
          document.getElementById('errors').innerHTML = '';

          $.get('cotizaciones',
              {
                e: emisor,
                c: cliente,
                m: moment($dateInputPicker.datepicker('getDate')).format('YYYY-MM-DD')
              }
          ).done(({results}) => {
            if (!results.length) {
              cotizacionSelect.appendChild(new Option('No se encontraron cotizaciones', ''));
              return;
            }

            cotizacionSelect.appendChild(new Option('Seleccione una cotización', ''));

            for (const result of results) {
              const option = new Option(result.text, result.id);

              if (result.requerirFactura) {
                option.dataset.requerirFactura = result.requerirFactura || false;
                option.dataset.clienteNombre = result.cliente_nombre;
                option.dataset.clienteId = result.cliente_id;
              }

              cotizacionSelect.appendChild(option);
            }
          }).always(() => {
            loadingState.style.display = 'none';
          });
        }

        function computeConceptos() {
          document.getElementById('errors').innerHTML = '';

          let totalValue = 0;
          let subtotalValue = 0;
          let impuestosValue = 0;

          for (const element of conceptoTable.prototypeHolder.rows) {
            subtotalValue += Number(element.connectedNodes.importeInput.getRawValue());
            impuestosValue += Number(element.connectedNodes.impuestoImporteInput.getRawValue());
            totalValue = subtotalValue + impuestosValue;
          }

          subtotalValue = Math.round10(subtotalValue, -2);
          totalValue = Math.round10(totalValue, -2);
          impuestosValue = Math.round10(impuestosValue, -2);

          subtotalInput.setRawValue(subtotalValue);
          totalInput.setRawValue(totalValue);

          totalImpuestosInput.setRawValue(impuestosValue);
          totalImporteImpuestosInput.setRawValue(impuestosValue);
        }
      })(jQuery)
    </script>
{% endblock %}
