<?php

namespace AppBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * SlipMovimientoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SlipMovimientoRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $slip
     * @param $start
     * @param $end
     *
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function isSlipOpen($slip, $start, $end)
    {
        return $this->createQueryBuilder('sm')
            ->where('
                    sm.slip = :slip AND
                    ((:fechaLlegada BETWEEN sm.fechaLlegada AND sm.fechaSalida) OR
                     (:fechaSalida BETWEEN sm.fechaLlegada AND sm.fechaSalida))
                ')
            ->setParameters([
                'slip' => $slip,
                'fechaLlegada' => $start,
                'fechaSalida' => $end,
            ])
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getCurrentOcupation($slip = null)
    {
        $qb = $this->createQueryBuilder('sm');

        $qb
            ->select('sm', 'slip', 'cotizacion', 'cliente', 'barco')
            ->leftJoin('sm.slip', 'slip')
            ->leftJoin('sm.marinahumedacotizacion', 'cotizacion')
            ->leftJoin('cotizacion.cliente', 'cliente')
            ->leftJoin('cotizacion.barco', 'barco')
            ->where('CURRENT_DATE() BETWEEN sm.fechaLlegada AND sm.fechaSalida');

        if (null !== $slip) {
            $qb->andWhere('slip.id = :slip')
                ->setParameter('slip', $slip);
        }

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function getCurrentOcupationStats($fecha)
    {
        $slipRepository = $this->getEntityManager()->getRepository('AppBundle:Slip');

        $subquery = $slipRepository->createQueryBuilder('ss')
            ->select('COUNT(ss.id)')
            ->where('ss.pies = s.pies');

        return $this->createQueryBuilder('sm')
            ->select('s.pies',
                'COUNT(sm.id) AS ocupados',
                "({$subquery->getDQL()}) AS total")
            ->leftJoin('sm.slip', 's')
            ->where(':fecha BETWEEN sm.fechaLlegada AND sm.fechaSalida')
            ->groupBy('s.pies')
            ->orderBy('s.pies', 'ASC')
            ->setParameter('fecha', $fecha)
            ->getQuery()
            ->getScalarResult();
    }
}
