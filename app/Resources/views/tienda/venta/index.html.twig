{% extends 'estructura/plantilla.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .table > tbody > tr > td > input[type="number"],
        .table > tbody > tr > td > .input-group > .input-group-addon {
            -webkit-border-radius: 0;
            -moz-border-radius: 0;
            border-radius: 0;
        }

        .help-block {
            color: #dd4b39;
        }
    </style>
{% endblock %}

{% form_theme form.conceptos '/tienda/venta/form-theme/_concepto.html.twig' %}
{% form_theme form 'tienda/inventario/form-theme/_total.html.twig' %}

{% block contwrapper %}
    <div class="content-wrapper">
        <section class="content">
            <div class="panel panel-novo">
                <div class="panel-heading">
                    <h3 class="panel-title">Punto de venta</h3>
                </div>
                <div class="panel-body">
                    {{ form_start(form) }}
                    <div class="row">
                        <div class="col-md-12">
                            <table class="table">
                                <thead>
                                <tr>
                                    <th width="3%"></th>
                                    <th width="35%">Producto</th>
                                    <th>Cantidad</th>
                                    <th width="10%">% Desc.</th>
                                    <th>Precio</th>
                                    <th>Subtotal</th>
                                    <th>IVA</th>
                                    <th>Total</th>
                                </tr>
                                </thead>
                                <tbody id="conceptos"
                                       data-prototype="{{ form_widget(form.conceptos.vars.prototype)|e('html_attr') }}">
                                {{ form_row(form.conceptos) }}
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4">
                            <a href="#" id="add" class="btn btn-contorno-azul">
                                + Producto
                            </a>
                        </div>
                        <div class="col-sm-4 text-right">
                            <h4 class="letra-azul">Descuento</h4>
                            <hr>
                            {{ form_row(form.descuento) }}
                            <h4 class="letra-azul">Subtotal</h4>
                            <hr>
                            {{ form_row(form.subtotal) }}
                        </div>
                        <div class="col-sm-4 text-right">
                            <h4 class="letra-azul">IVA</h4>
                            <hr>
                            {{ form_row(form.iva) }}
                            <h4 class="letra-azul">Total</h4>
                            <hr>
                            {{ form_row(form.total) }}
                        </div>
                    </div>
                </div>
                <div class="panel-footer">
                    <div class="row">
                        <div class="col-md-12">
                            <button type="submit" class="btn btn-azul pull-right">
                                Guardar
                            </button>
                            {{ form_end(form) }}
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript">
      const Venta = (($) => {
        const addButton = document.getElementById('add');
        const EntradasHolder = document.getElementById('conceptos');
        const DescuentoInput = document.getElementById('appbundle_tienda_venta_descuento');
        const SubtotalInput = document.getElementById('appbundle_tienda_venta_subtotal');
        const IvaInput = document.getElementById('appbundle_tienda_venta_iva');
        const TotalInput = document.getElementById('appbundle_tienda_venta_total');
        const IVA = .16;

        let counter = EntradasHolder.childElementCount;
        let searchString = '';

        /**
         * Crea una fila en la tabla de entradas con un boton que la remueve
         */
        function createRow() {
          let prototipo = EntradasHolder.dataset.prototype.replace(/__name__/g, counter);

          let tempTable = document.createElement('table');
          tempTable.innerHTML = prototipo;

          let row = tempTable.querySelector('tr');

          addRowListeners(row);
          addRowRemove(row);

          EntradasHolder.appendChild(row);
          counter++;

          return row;
        }

        /**
         * Agrega las funciones de busqueda por producto, calculo de cantidad por precio unitario del producto
         */
        function addRowListeners(row) {
          const $ProductSelect = addSelect2(row.cells[1].querySelector('select'));
          const $Row = $(row);
          const $QuantityInput = $Row.find('[type="number"]');
          const $DiscountInput = $Row.find('.discount-input');
          const $MoneyInputs = $Row.find('.money-input');
          const PrecioInput = $MoneyInputs[0];
          const SubtotalInput = $MoneyInputs[1];
          const IvaInput = $MoneyInputs[2];
          const TotalInput = $MoneyInputs[3];

          $ProductSelect
              .on('select2:select', function (e) {
                const producto = e.params.data;
                PrecioInput.value = transformToMoneyFormat(producto.price.public.toFixed(2));
                $QuantityInput.val(1).trigger('input');
              });

          $QuantityInput.on('input', computeRowValues);
          $DiscountInput.on('input', computeRowValues);

          function computeRowValues(event) {
            event.target.value = event.target.value.replace(/[^\d.]/g, '');

            if (!event.target.value) return;

            const Cantidad = Number($QuantityInput.val());
            const Descuento = (Number($DiscountInput.val()) / 100);
            const Precio = Number(PrecioInput.value);

            let subtotal = (Cantidad * Precio);
            let iva = (subtotal * IVA);

            if (Descuento) {
              subtotal = subtotal - (subtotal * Descuento);
              iva = iva - (iva * Descuento);
            }

            SubtotalInput.value = transformToMoneyFormat(subtotal.toFixed(2));
            IvaInput.value = transformToMoneyFormat(iva.toFixed(2));
            TotalInput.value = transformToMoneyFormat((subtotal + iva).toFixed(2));

            computeTotalValues();
          }
        }

        /**
         * Cicla a traves de cada columna con un valor y la suma
         */
        function computeTotalValues() {
          let totalValues = Array
              .from(EntradasHolder.querySelectorAll('tbody tr'))
              .reduce(function (a, b) {
                let quantity = Number(getInput(b.cells[2]).value);
                let price = Number(getInput(b.cells[4]).value);
                let descuento = (quantity * price) * (Number(getInput(b.cells[3]).value) / 100);

                return {
                  descuento: a.descuento + descuento,
                  subtotal: a.subtotal + Number(getInput(b.cells[5]).value.replace(/,/g, '')),
                  iva: a.iva + Number(getInput(b.cells[6]).value.replace(/,/g, '')),
                  total: a.total + Number(getInput(b.cells[7]).value.replace(/,/g, '')),
                }
              }, {
                descuento: 0,
                subtotal: 0,
                iva: 0,
                total: 0,
              });

          DescuentoInput.value = transformToMoneyFormat(totalValues.descuento.toFixed(2));
          SubtotalInput.value = transformToMoneyFormat(totalValues.subtotal.toFixed(2));
          IvaInput.value = transformToMoneyFormat(totalValues.iva.toFixed(2));
          TotalInput.value = transformToMoneyFormat(totalValues.total.toFixed(2));

          function getInput(cell) {
            return cell.querySelector('input');
          }
        }

        /**
         * Agrega un boton para remover su propia row
         */
        function addRowRemove(row) {
          let celda = row.cells[0];
          let removeButton = document.createElement('a');

          removeButton.className = 'badge btn-xs btn-naranja';
          removeButton.innerHTML = '<i class="fa fa-times"></i>';
          removeButton.addEventListener('click', (event) => {
            event.preventDefault();
            event.stopPropagation();

            removeButton.parentNode.parentNode.remove(removeButton);
            computeTotalValues();
          });

          celda.appendChild(removeButton);
        }

        /**
         * Transforma un select en un tipo select2 que saca lo datos de productos.json
         */
        function addSelect2(select) {
          let $select = $(select);

          $select.select2({
            ajax: {
              url: 'productos',
              dataType: 'json',
              processResults(response) {
                return {
                  results: response.results.map(result => ({
                    id: result.id,
                    text: result.nombre,
                    price: {
                      public: (result.precio / 100),
                      colaborator: (result.preciocolaborador / 100),
                    },
                    barcode: result.codigoBarras,
                  }))
                }
              }
            }
          });

          return $select;
        }

        function setProductAutomatically(searchString) {
          if (!searchString || searchString === 'Enter') return;

          $.ajax(
              'producto/' + searchString,
              {
                success(producto) {
                  let existingOption = EntradasHolder.querySelector(`option[value="${producto.id}"]`);

                  if (existingOption) {
                    let quantityOption = existingOption.parentNode.parentNode.nextElementSibling.querySelector('input');
                    quantityOption.value = Number(quantityOption.value) + 1;
                    $(quantityOption).trigger('input');

                    return;
                  }

                  let row = createRow();
                  let $select = $(row.cells[1].querySelector('select'));
                  let option = new Option(producto.nombre, producto.id, true, true);

                  $select.append(option);
                  $select.trigger({
                    type: 'select2:select',
                    params: {
                      data: {
                        id: producto.id,
                        text: producto.nombre,
                        price: {
                          public: (producto.precio / 100),
                          colaborator: (producto.preciocolaborador / 100),
                        },
                        barcode: producto.codigoBarras,
                      }
                    }
                  });
                }
              }
          );
        }

        /**
         * Da formato a un numero en decimales y reduce sus decimales a 2
         */
        function transformToMoneyFormat(numero) {
          return numero
              .replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
        }

        addButton
            .addEventListener('click', (event) => {
              event.preventDefault();
              event.stopPropagation();

              createRow();
            });

        EntradasHolder
            .querySelectorAll('tr')
            .forEach(function (row) {
              addRowListeners(row);
              addRowRemove(row);
            });

        window.onkeypress = function (event) {
          if (event.keyCode === 13 && searchString) {
            setProductAutomatically(searchString);

            searchString = '';
            return;
          }

          searchString += event.key;
        }

      })(jQuery);
    </script>
{% endblock %}
