<?php

namespace AppBundle\Repository;

/**
 * CombustibleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CombustibleRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Los metodos getCotizacionesFromCliente y getOneWithCatalogo son ambos para las facturaciones
     * muestran los folios de cotizaciones en la facturacion y generan los conceptos de la tabla
     *
     * @param $client
     *
     * @param $inicio
     * @param $fin
     *
     * @return array
     */
    public function getCotizacionesFromCliente($client, $inicio, $fin)
    {
        $queryBuilder = $this->createQueryBuilder('cotizaciones');

        $queryBuilder
            ->select(
                'cotizaciones.id',
                '(CASE '.
                'WHEN cotizaciones.foliorecotiza > 0 '.
                'THEN CONCAT(cotizaciones.folio, \'-\', cotizaciones.foliorecotiza, \' \', barco.nombre) '.
                'ELSE CONCAT(cotizaciones.folio, \' \', barco.nombre) '.
                'END) AS text '
            )
            ->leftJoin('cotizaciones.barco', 'barco')
            ->andWhere(
                'cotizaciones.fecha BETWEEN :inicio AND :fin',
                'cotizaciones.factura IS NULL',
                'cotizaciones.validacliente = 2'
            )
            ->setParameter('inicio', $inicio)
            ->setParameter('fin', $fin);

        if ($client === '413') {
            return $queryBuilder->getQuery()->getArrayResult();
        }

        $queryBuilder
            ->andWhere('IDENTITY(cotizaciones.cliente) = :client')
            ->setParameter('client', $client);

        return $queryBuilder->getQuery()->getArrayResult();
    }

    /**
     * Se utiliza para sacar las cotizaciones y relacionarlas con una factura
     *
     * @param $client
     *
     * @param $inicio
     * @param $fin
     *
     * @param null $cotizacionId
     *
     * @return array
     */
    public function getFullCotizacionesFromCliente($client, $inicio, $fin, $cotizacionId = null)
    {
        $queryBuilder = $this->createQueryBuilder('cotizaciones');

        $queryBuilder
            ->andWhere(
                'cotizaciones.fecha BETWEEN :inicio AND :fin',
                'cotizaciones.factura IS NULL',
                'cotizaciones.validacliente = 2'
            )
            ->setParameter('inicio', $inicio)
            ->setParameter('fin', $fin);

        if ($cotizacionId) {
            $queryBuilder->andWhere('cotizaciones.id IN (:cotizacionId)');
            $queryBuilder->setParameter('cotizacionId', $cotizacionId);
        }

        // Si el cliente es PUBLICO EN GENERAL ID 413, entonces debemos ignorar la busqueda por cliente de
        // las cotizaciones
        if ($client === 413) {
            return $queryBuilder->getQuery()->getResult();
        }

        $queryBuilder->andWhere('IDENTITY(cotizaciones.cliente) = :client');
        $queryBuilder->setParameter('client', $client);

        return $queryBuilder->getQuery()->getResult();
    }

    public function getOneWithCatalogo($id)
    {
        $manager = $this->getEntityManager();

        $cotizacion = $manager->createQuery(
            'SELECT '.
            'cotizacion.cantidad AS conceptoCantidad, cotizacion.total AS conceptoImporte, '.
            'tipo.id AS productoId, '.
            'tipo.nombre AS conceptoDescripcion, '.
            'cps.id AS cpsId, cps.descripcion as cpsDescripcion, '.
            'cu.id AS cuId, cu.nombre AS cuDescripcion '.
            'FROM AppBundle:Combustible cotizacion '.
            'LEFT JOIN cotizacion.tipo tipo '.
            'LEFT JOIN tipo.claveProdServ cps '.
            'LEFT JOIN tipo.claveUnidad cu '.
            'WHERE cotizacion.id = :id '.
            'AND cotizacion.factura IS NULL')
            ->setParameter('id', $id)
            ->getArrayResult();

        return $cotizacion;
    }
}
