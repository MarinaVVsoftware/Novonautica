{% extends 'estructura/plantilla.twig' %}
{#{% import 'estructura/modalborrar.twig' as modal %}#}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .help-block {
            color: #dd4b39;
        }

        .autocomplete-suggestions {
            background: #3e4766;
            overflow: auto;
            width: auto !important;
            min-width: 100px;
            max-width: 300px;
        }

        .autocomplete-suggestion {
            padding: 2px 5px;
            white-space: nowrap;
            overflow: hidden;

        }

        .autocomplete-selected {
            background: #0097f6;
        }

        .autocomplete-suggestions strong {
            font-weight: normal;
            color: #3399FF;
        }

        .autocomplete-suggestion:hover strong {
            color: #363c52;
        }

        .autocomplete-group {
            padding: 2px 5px;
        }

        .autocomplete-group strong {
            display: block;
            border-bottom: 1px solid #000;
        }

        .novo-checkbox-container .checkbox {
            position: relative;
            padding: 20px 0 20px 20px;
            text-align: left;
        }

        .novo-checkbox-container .checkbox label {
            cursor: pointer;
            padding-left: 10px;
        }

        .novo-checkbox-container .checkbox label:before,
        .novo-checkbox-container .checkbox label:after {
            content: '';
            position: absolute;
            top: 50%;
        }

        .novo-checkbox-container .checkbox label:before {
            left: 0;
            width: 20px;
            height: 20px;
            margin: -10px 0 0;
            border-radius: 4px;
            background: #3e4766;
            -webkit-box-shadow: 0 0 1px grey;
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.5), 0 1px 0 rgba(255, 255, 255, 0.4);
        }

        .novo-checkbox-container .checkbox label:after {
            width: 14px;
            height: 8px;
            top: 24px;
            left: 3px;
            border: 3px solid #0097f6;
            border-top: none;
            border-right: none;
            background: transparent;
            opacity: 0;
            -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg);
        }

        .novo-checkbox-container .checkbox label:hover:after {
            opacity: .5;
        }

        .novo-checkbox-container .checkbox input[type="radio"],
        .novo-checkbox-container .checkbox input[type="checkbox"] {
            position: absolute;
            top: 0;
            left: -9999px;
            visibility: hidden;
        }

        .novo-checkbox-container .checkbox input[type="radio"]:checked + label:after,
        .novo-checkbox-container .checkbox input[type="checkbox"]:checked + label:after {
            opacity: 1;
        }
    </style>
{% endblock %}

{% block contwrapper %}
    <div class="content-wrapper">
        <section class="content">
            <div class="row">
                <div class="col-md-12">
                    {% for message in app.flashes('danger') %}
                        <div class="alert alert-danger">
                            {{ message }}
                        </div>
                    {% endfor %}
                    {% for error in form.vars.errors %}
                        <div class="alert alert-danger">
                            {{ error.message }}
                        </div>
                    {% endfor %}
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-novo">
                        <div class="panel-heading">
                            <h3 class="panel-title">
                                Nueva factura
                            </h3>
                        </div>
                        <div class="panel-body panel-pestanias">
                            {{ form_start(form) }}
                            <ul class="nav nav-tabs" role="tablist">
                                <li class="primero active">
                                    <a href="#generales" data-toggle="tab">Generales</a>
                                </li>
                                <li class="primero">
                                    <a href="#conceptos" data-toggle="tab">Conceptos</a>
                                </li>
                            </ul>
                            <div class="tab-content">
                                <div class="tab-pane active" id="generales">
                                    <div class="row">
                                        <div class="col-sm-3">
                                            {{ form_row(form.emisor) }}
                                        </div>
                                        <div class="col-sm-3">
                                            {{ form_row(form.rfc) }}
                                        </div>
                                        <div class="col-sm-3">
                                            {{ form_row(form.cliente) }}
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="novo-checkbox-container">
                                                {{ form_row(form.facturaGlobal) }}
                                            </div>
                                        </div>
                                    </div>
                                    <hr style="margin: 1em 0 !important;">
                                    <div class="row">
                                        <div class="col-sm-3">
                                            {{ form_row(form.numeroTelefonico) }}
                                            {{ form_row(form.razonSocial) }}
                                            {{ form_row(form.direccionFiscal) }}
                                            {{ form_row(form.email) }}
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="pago">
                                                {{ form_row(form.metodoPago) }}
                                                {{ form_row(form.formaPago) }}
                                            </div>
                                            {{ form_row(form.usoCFDI) }}
                                        </div>
                                        <div class="col-sm-3">
                                            {{ form_row(form.tipoComprobante) }}
                                            <div class="pago">
                                                {{ form_row(form.condicionesPago) }}
                                            </div>
                                        </div>
                                    </div>
                                    <hr style="margin: 1em 0 !important;">
                                    <div class="row">
                                        <div class="col-sm-12">
                                            {{ form_row(form.cuerpoCorreo) }}
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane" id="conceptos">
                                    <div class="row">
                                        <div class="col-sm-3">
                                            {{ form_row(form.folioCotizacion) }}
                                        </div>
                                        <div class="col-sm-3">
                                            {{ form_row(form.pagos) }}
                                        </div>
                                        <div class="col-sm-3">
                                            {{ form_row(form.moneda) }}
                                        </div>
                                        <div class="col-sm-3">
                                            {{ form_row(form.tipoCambio) }}
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <table class="table">
                                                <thead>
                                                <tr>
                                                    <th></th>
                                                    <th style="vertical-align: middle;">Cantidad</th>
                                                    <th style="vertical-align: middle">ClaveProdServ</th>
                                                    <th style="vertical-align: middle">Clave Unidad</th>
                                                    <th style="vertical-align: middle" width="25%">Descripci√≥n</th>
                                                    <th style="vertical-align: middle">Valor unitario</th>
                                                    <th class="pago" style="vertical-align: middle">Descuento</th>
                                                    <th class="pago" style="vertical-align: middle">IVA</th>
                                                    <th style="vertical-align: middle">Sub-total</th>
                                                    <th style="vertical-align: middle">Total</th>
                                                </tr>
                                                </thead>
                                                {% form_theme form.conceptos 'contabilidad/facturacion/form-themes/_concepto.html.twig' %}
                                                <tbody id="prototype-holder"
                                                       data-prototype="{{ form_widget(form.conceptos.vars.prototype)|e('html_attr') }}">
                                                {{ form_row(form.conceptos) }}
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-3">
                                            <a href="#" id="add-servicio" class="btn btn-contorno-azul">
                                                + Agregar concepto
                                            </a>
                                        </div>
                                        <div class="col-sm-4 col-sm-push-5 text-right">
                                            {% form_theme form 'contabilidad/facturacion/form-themes/_factura.html.twig' %}
                                            <h4 class="letra-azul">Sub-total</h4>
                                            {{ form_widget(form.subtotal) }}
                                            <hr>
                                            <div class="pago">
                                                <h4 class="letra-azul">Descuento</h4>
                                                {{ form_widget(form.descuento) }}
                                                <hr>
                                                <h4 class="letra-azul">IVA</h4>
                                                {{ form_widget(form.iva) }}
                                                <hr>
                                            </div>
                                            <h4 class="letra-azul">Total</h4>
                                            {{ form_widget(form.total) }}
                                            {{ form_errors(form.total) }}
                                            <hr>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel-footer">
                            <div class="row">
                                <div class="col-md-12">
                                    <button type="submit" class="btn btn-azul pull-right">
                                        Facturar
                                    </button>
                                    {{ form_end(form) }}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('js/jquery.autocomplete.min.js') }}"></script>
    <script type="text/javascript">
      /*
          JQUERY AUTOCOMPLETE && COLLECCION DE CONCEPTOS
      */
      (function ($) {
        const theForm = document.querySelector('[name="appbundle_contabilidad_facturacion"');
        const $rfcSelect = $('#appbundle_contabilidad_facturacion_rfc');
        const $cotizacionSelect = $('#appbundle_contabilidad_facturacion_folioCotizacion');
        const tipoComprobanteHolder = document.getElementById('appbundle_contabilidad_facturacion_tipoComprobante');
        const addLink = document.getElementById('add-servicio');
        const conceptoHolder = document.getElementById('prototype-holder');
        const facturaGlobal = document.getElementById('appbundle_contabilidad_facturacion_facturaGlobal');
        const pagosHolder = document.getElementById('appbundle_contabilidad_facturacion_pagos');
        const tipoCambioHolder = document.getElementById('appbundle_contabilidad_facturacion_tipoCambio');
        const subtotalHolder = document.getElementById('appbundle_contabilidad_facturacion_subtotal');
        const descuentoHolder = document.getElementById('appbundle_contabilidad_facturacion_descuento');
        const ivaHolder = document.getElementById('appbundle_contabilidad_facturacion_iva');
        const totalHolder = document.getElementById('appbundle_contabilidad_facturacion_total');
        const monedaSelect = document.getElementById('appbundle_contabilidad_facturacion_moneda');
        const razon = document.getElementById('appbundle_contabilidad_facturacion_razonSocial');
        const direccion = document.getElementById('appbundle_contabilidad_facturacion_direccionFiscal');
        const nombre = document.getElementById('appbundle_contabilidad_facturacion_cliente');
        const email = document.getElementById('appbundle_contabilidad_facturacion_email');
        const telefono = document.getElementById('appbundle_contabilidad_facturacion_numeroTelefonico');

        let cotizacionData = null;
        let cotizacionesData = null;
        let conceptoCounter = '{{ form.conceptos|length }}';
        const autocompleteSettings = {
          dataType: 'json',
          deferRequestBy: 300,
          showNoSuggestionNotice: true,
          noSuggestionNotice: 'No se encontraron resultados',
          triggerSelectOnValidInput: false,
        };

        // Checar si se regreso con un folio de cotizacion
        if ($cotizacionSelect.val()) {
          pagosHolder.removeAttribute('multiple');
        }

        // Checar si se esta cargando una factura global
        if (facturaGlobal.checked) {
          $cotizacionSelect.parent().addClass('hidden');
        }
        // Realizar factura global
        facturaGlobal.addEventListener('change', function () {
          const receptor = {
            rfc: 'XAXX010101000',
            cliente: 'PUBLICO EN GENERAL',
          };

          if (this.checked) {
            $rfcSelect.val(receptor.rfc);
            razon.value = nombre.value = direccion.value = receptor.cliente;
            telefono.value = '00000000';

            $cotizacionSelect.prop('readonly', 'readonly');
            $cotizacionSelect.val('');
            $cotizacionSelect.parent().addClass('hidden');
            pagosHolder.setAttribute('multiple', 'multiple');
            pagosHolder.innerHTML = '';

            if (!cotizacionesData) {
              $.ajax({
                url: 'factura-global.json', success: data => {
                  cotizacionesData = data;
                  rollFacturaGlobal(cotizacionesData);
                }
              });
            } else {
              rollFacturaGlobal(cotizacionesData)
            }
          } else {
            $rfcSelect.val('');
            razon.value = nombre.value = direccion.value = '';
            telefono.value = '';
            pagosHolder.removeAttribute('multiple');
            $cotizacionSelect.parent().removeClass('hidden');
            $cotizacionSelect.removeAttr('readonly');
            pagosHolder.innerHTML = '';
            conceptoHolder.innerHTML = '';
            appendRow();
          }

          // Rellenar datos del receptor
          function rollFacturaGlobal(cotizacionesData) {
            let precio = 0;
            conceptoHolder.innerHTML = '';

            cotizacionesData.forEach(function (cotizacion) {
              cotizacion.pagos.forEach(function (pago) {
                precio = pago.cantidad + precio;
                let opt = new Option(`$${(pago.cantidad / 100).toFixed(2)} USD`.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'), pago.id);
                opt.setAttribute('selected', 'selected');
                pagosHolder.appendChild(opt);
              });
            });

            precio = ((precio / 116) * 100).toFixed(2);
            // Debido al calculo de diferentes divisas ya no se enviara el total para la factura global
            appendRow({
              cantidad: 1,
              servicio: 'VENTA',
              precio: 0,
              cps: '01010101 / No existe en el cat√°logo',
              cu: 'ACT / Actividad'
            }, true);
          }
        });

        // En caso de que el tipo de comprobante sea "P", remover todas las dependecias de "I" y "E"
        checkTipoComprobante();
        tipoComprobanteHolder.addEventListener('change', checkTipoComprobante);

        // Autocomplete para rellenado de datos de cliente con RFC
        $rfcSelect.autocomplete({
          ...autocompleteSettings,
          minChars: 2,
          paramName: 'rfc',
          serviceUrl: `{{ app.request.requestUri }}/../clientes.json`,
          params: {},
          transformResult: function (datos) {
            return {
              suggestions: datos.map(data => {
                return {
                  value: data.rfc,
                  data: data
                }
              })
            }
          },
          beforeRender: function (container, suggestions) {
            if (!suggestions.length) return;
            [...container[0].childNodes].map((suggestion, i) => {
              suggestion.innerHTML = `${suggestion.innerHTML} <small>(${suggestions[i].data.cliente.nombre.substring(0, 15)})</small>`;
            })
          },
          onSelect: function ({data}) {
            razon.value = data.razonSocial;
            direccion.value = data.direccion;
            nombre.value = data.cliente.nombre;
            email.value = data.correos;
            telefono.value = data.cliente.telefono;
          }
        });

        if ($cotizacionSelect.val().trim()) {
          pagosHolder.setAttribute('required', 'required');
        }

        $cotizacionSelect.on('input', function () {
          if (this.value.trim()) {
            pagosHolder.setAttribute('required', 'required');
            pagosHolder.removeAttribute('multiple');
          }
        });

        // Autocomplete para agregar filas a la tabla de conceptos
        $cotizacionSelect.autocomplete({
          ...autocompleteSettings,
          minChars: 1,
          paramName: 'folio',
          serviceUrl: `{{ app.request.BaseUrl }}/contabilidad/facturacion/cotizaciones.json`,
          params: {},
          transformResult: function (cotizaciones) {
            return {
              suggestions: cotizaciones.map(cotizacion => {
                return {
                  value: cotizacion.foliorecotiza ? `${cotizacion.folio}-${cotizacion.foliorecotiza}` : `${cotizacion.folio}`,
                  data: cotizacion
                }
              })
            }
          },
          onSelect: function ({data}) {
            pagosHolder.removeAttribute('multiple');
            conceptoHolder.innerHTML = '';
            appendRow();
            pagosHolder.innerHTML = '';
            pagosHolder.appendChild(new Option('Seleccione un pago', ''));
            pagosHolder.dataset.folio = data.folio;
            data.pagos.forEach(function (pago) {
              let opt = new Option(`$${(pago.cantidad / 100).toFixed(2)} ${pago.divisa}`.replace(/(\d)(?=(\d{3})+\.)/g, '$1,'), pago.id);
              pagosHolder.appendChild(opt);
            });
            cotizacionData = data;

            // Buscar datos si data esta vacio despues de regresar de un error
          }
        });

        // Al seleccionar un pago, agrega una row con los conceptos de la cotizacion
        pagosHolder.addEventListener('change', function (e) {
          if (!this.options[this.selectedIndex].value) {
            conceptoHolder.innerHTML = '';
            appendRow();
            return;
          }

          if (null === cotizacionData) {
            $.ajax({ // Al regresar por un error, cotizacionData no tiene datos
              url: `{{ app.request.BaseUrl }}/contabilidad/facturacion/cotizaciones.json`,
              data: {folio: $cotizacionSelect.val()},
              dataType: 'json',
              success: function (data) {
                cotizacionData = data[0];

                let pago = cotizacionData.pagos.filter(v => v.id === Number(pagosHolder.value));
                monedaSelect.value = pago[0].divisa;
                tipoCambioHolder.value = `${pago[0].dolar / 100}`;

                conceptoHolder.innerHTML = '';
                if (cotizacionData.conceptos) {
                  cotizacionData.conceptos.forEach(concepto => appendRow(concepto, true));
                }

                if (cotizacionData.producto) {

                  if (cotizacionData.solicitudEspecial) {
                    cotizacionData.producto.push({
                      cantidad: 1,
                      producto: {
                        nombre: cotizacionData.solicitudEspecial,
                        precio: cotizacionData.preciosolespecial,
                        claveProdServ: {
                          claveProdServ: '01010101',
                          descripcion: 'No existe en el cat√°logo'
                        },
                        claveUnidad: {
                          claveUnidad: 'ACT',
                          nombre: 'Actividad'
                        }
                      }
                    });
                  }

                  cotizacionData.producto.forEach(producto => {
                    monedaSelect.value = 'MXN';
                    producto.precio = producto.producto.precio;
                    producto.cps = producto.producto.claveProdServ.claveProdServ + ' / ' + producto.producto.claveProdServ.descripcion;
                    producto.cu = producto.producto.claveUnidad.claveUnidad + ' / ' + producto.producto.claveUnidad.nombre;

                    appendRow(producto, true)
                  });
                }
              }
            });
          } else {
            // Cambiar la moneda a facturar en base al pago realizado
            let pago = cotizacionData.pagos.filter(v => v.id === Number(this.value));
            monedaSelect.value = pago[0].divisa;
            tipoCambioHolder.value = `${pago[0].dolar / 100}`;

            conceptoHolder.innerHTML = '';
            if (cotizacionData.conceptos) {
              cotizacionData.conceptos.forEach(concepto => appendRow(concepto, concepto.tipo === 3));
            }

            if (cotizacionData.producto) {

              if (cotizacionData.solicitudEspecial) {
                cotizacionData.producto.push({
                  cantidad: 1,
                  producto: {
                    nombre: cotizacionData.solicitudEspecial,
                    precio: cotizacionData.preciosolespecial,
                    claveProdServ: {
                      claveProdServ: '01010101',
                      descripcion: 'No existe en el cat√°logo'
                    },
                    claveUnidad: {
                      claveUnidad: 'ACT',
                      nombre: 'Actividad'
                    }
                  }
                });
              }

              cotizacionData.producto.forEach(producto => {
                monedaSelect.value = 'MXN';
                producto.precio = producto.producto.precio;
                producto.cps = producto.producto.claveProdServ.claveProdServ + ' / ' + producto.producto.claveProdServ.descripcion;
                producto.cu = producto.producto.claveUnidad.claveUnidad + ' / ' + producto.producto.claveUnidad.nombre;

                appendRow(producto, true)
              });
            }
          }
        });

        // Agrega una nueva row vacia
        addLink.addEventListener('click', function (e) {
          e.preventDefault();
          appendRow();
        });

        // Agrega un row
        function appendRow(data, writePrice) {
          let prototype = conceptoHolder.dataset.prototype.replace(/__name__/g, conceptoCounter);
          let unaTabla = document.createElement('table');
          unaTabla.innerHTML = prototype;
          let concepto = unaTabla.querySelector('.concepto-item');
          let removeButton = document.createElement('a');
          removeButton.className = 'badge btn-xs btn-naranja';
          removeButton.innerHTML = '<i class="fa fa-times"></i>';

          removeButton.addEventListener('click', function (e) {
            e.preventDefault();
            this.parentNode.parentNode.remove(this);
            if (!conceptoHolder.children.length) {
              addLink.classList.remove('hidden');
              pagosHolder.selectedIndex = 0;
              pagosHolder.innerHTML = '';
              $cotizacionSelect.val('');
              subtotalHolder.value = 0;
              descuentoHolder.value = 0;
              ivaHolder.value = 0;
              totalHolder.value = 0;
            }
          });

          if (conceptoHolder.childElementCount > 0) {
            concepto.cells[0].appendChild(removeButton);
          }

          // Esconder descuento si el tipo de comprobante es "P"
          if (tipoComprobanteHolder.value === 'P') {
            let pagoCell = concepto.querySelectorAll('.pago');
            pagoCell.forEach(cell => {
              cell.querySelector('input').removeAttribute('required');
              cell.classList.add('hidden');
            });
          }

          conceptoHolder.appendChild(concepto);
          addRowListener(concepto, data, writePrice);

          conceptoCounter++;
        }

        // Agrega funcionalidad a las row existentes
        [...conceptoHolder.children].forEach(row => addRowListener(row));

        // Le agrega la funcion de calculo a una row y si recibe datos los calcula;
        function addRowListener(concepto, data, writePrice) {
          let cantidadConcepto = concepto.children[1].firstElementChild;
          let cpsConcepto = concepto.children[2].firstElementChild;
          let cuConcepto = concepto.children[3].firstElementChild;
          let descripcionConcepto = concepto.children[4].firstElementChild;
          let vUnitarioConcepto = concepto.children[5].querySelector('input');
          let descuentoConcepto = concepto.children[6].querySelector('input');
          let ivaConcepto = concepto.children[7].querySelector('input');
          let subtotalConcepto = concepto.children[8].querySelector('input');
          let totalConcepto = concepto.children[9].querySelector('input');

          cantidadConcepto.addEventListener('input', calculateConceptos);
          vUnitarioConcepto.addEventListener('input', calculateConceptos);
          descuentoConcepto.addEventListener('input', calculateConceptos);
          ivaConcepto.addEventListener('input', calculateConceptos);

          if (data) {
            // Convertir el tipo para MHC de numero a descripcion
            switch (data.tipo) {
              case 1:
                data.nombre = 'D√≠as de estancia';
                break;
              case 2:
                data.nombre = 'Conexi√≥n a electricidad';
                break;
              case 3:
                data.nombre = 'Abastecimiento de combustible';
                break;
            }

            cantidadConcepto.value = data.cantidad || cantidadConcepto.value;
            cpsConcepto.value = data.cps || cpsConcepto.value || '';
            cuConcepto.value = data.cu || cuConcepto.value || '';
            descripcionConcepto.value = data.nombre || data.serviciobasico || data.servicio || data.producto.nombre || data.producto || data.otroservicio || descripcionConcepto.value;

            // Resta el iva de un precio;
            // data.precio = ((data.precio / 116) * 100).toFixed(2);

            vUnitarioConcepto.value = true === writePrice ? `${(data.precio / 100).toFixed(2)}` : 0;
            descuentoConcepto.value = data.descuento ? `${data.descuento / 100}` : 0;

            // Si el pago esta en MXN y existe un valor unitario, entonces multiplicarlo por el valor del dolar cotizado
            if (data.tipo === 3 && monedaSelect.value === 'MXN' && writePrice) {
              vUnitarioConcepto.value = true === writePrice ? `${((data.precio / 100) * (cotizacionData.dolar / 100)).toFixed(2)}` : 0;
            }
          }

          calculateConceptos();

          function calculateConceptos() {
            // Valores definidos por el usuario
            let cantidad = (clearPrice(cantidadConcepto.value) * 1);
            let precio = (clearPrice(vUnitarioConcepto.value) * 100);
            let descuento = (clearPrice(descuentoConcepto.value) * 100);

            if (precio <= descuento) {
              descuentoConcepto.value = `${precio / 100}`;
              descuento = (clearPrice(descuentoConcepto.value) * 100);
            }

            // Calculo automatico
            let subtotal = (cantidad * precio);
            let iva = Math.round(subtotal * .16);
            let total = ((subtotal - descuento) + iva);

            if (tipoComprobanteHolder.value === 'P') {
              vUnitarioConcepto.value = '0';
              subtotalConcepto.value = '0';
              ivaConcepto.value = '0';
              totalConcepto.value = '0';
            } else {
              subtotalConcepto.value = `${subtotal / 100}`;
              ivaConcepto.value = `${iva / 100}`;
              totalConcepto.value = `${total / 100}`;
            }

            calculateTotals();
          }

          const conceptoSettings = {
            dataType: 'json',
            deferRequestBy: 150,
            showNoSuggestionNotice: true,
            noSuggestionNotice: 'No se encontraron resultados',
            triggerSelectOnValidInput: true,
            minChars: 1,
            paramName: 'q',
            params: {},
            autoSelectFirst: true,
            onSearchStart: function (params) {
              if (params.q.includes('/')) {
                params.q = params.q.split(' / ')[1].trim();
              }
              return params;
            },
          };

          $(cpsConcepto).autocomplete({
            ...conceptoSettings,
            serviceUrl: `{{ app.request.BaseUrl }}/contabilidad/facturacion/claveprodserv.json`,
            transformResult: function (claves) {
              return {
                suggestions: claves.map(clave => {
                  return {
                    value: `${clave.claveProdServ} / ${clave.descripcion}`,
                    data: clave.id
                  }
                })
              }
            }
          });

          $(cuConcepto).autocomplete({
            ...conceptoSettings,
            serviceUrl: `{{ app.request.BaseUrl }}/contabilidad/facturacion/clave_unidad.json`,
            transformResult: function (claves) {
              return {
                suggestions: claves.map(clave => {
                  return {
                    value: `${clave.claveUnidad} / ${clave.nombre}`,
                    data: clave.id
                  }
                })
              }
            }
          });
        }

        // Comprobar que tipo de comprobante antes del submit
        theForm.addEventListener('submit', function (e) {
          e.preventDefault();
          const pagoRemovable = document.querySelectorAll('.pago');
          if (tipoComprobanteHolder.value === 'P') {
            pagoRemovable.forEach(item => item.parentNode.removeChild(item));
          }
          this.submit();
        });

        function calculateTotals() {
          if (!conceptoHolder.childElementCount) return;
          let subtotalColumn = conceptoHolder.getElementsByClassName('subtotal-column');
          let descuentoColumn = conceptoHolder.getElementsByClassName('descuento-column');
          let ivaColumn = conceptoHolder.getElementsByClassName('iva-column');
          let totalColumn = conceptoHolder.getElementsByClassName('total-column');

          if (tipoComprobanteHolder.value === 'P') {
            subtotalHolder.value = '0';
            descuentoHolder.value = '0';
            ivaHolder.value = '0';
            totalHolder.value = '0';
          } else {
            subtotalHolder.value = [...subtotalColumn]
                .map(row => Number(clearPrice(row.value)))
                .reduce((a, b) => a + b)
                .toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
            descuentoHolder.value = [...descuentoColumn]
                .map(row => Number(clearPrice(row.value)))
                .reduce((a, b) => a + b)
                .toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
            ivaHolder.value = [...ivaColumn]
                .map(row => Number(clearPrice(row.value)))
                .reduce((a, b) => a + b)
                .toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
            totalHolder.value = [...totalColumn]
                .map(row => Number(clearPrice(row.value)))
                .reduce((a, b) => a + b)
                .toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
          }
        }


        function clearPrice(textPrice) {
          return textPrice.replace(/(?!-)[^0-9.]/g, '');
        }

        function clearData(e) {
          if ((e.keyCode === 8 && !this.value.trim()) || !e.target.value.trim()) {
            conceptoHolder.innerHTML = '';
            appendRow();
            tipoCambioHolder.removeAttribute('readonly');
            pagosHolder.selectedIndex = 0;
            pagosHolder.removeAttribute('required');
            pagosHolder.innerHTML = '';
            subtotalHolder.value = 0;
            descuentoHolder.value = 0;
            ivaHolder.value = 0;
            totalHolder.value = 0;
          }
        }

        function checkTipoComprobante() {
          const pagoRemovable = document.querySelectorAll('.pago');
          if (tipoComprobanteHolder.value === 'P') {
            pagoRemovable.forEach(function (item) {
              let hasInput = item.querySelector('input');
              if (hasInput) {
                hasInput.value = '';
                hasInput.removeAttribute('required');
                hasInput.dispatchEvent(new Event('input'));
              }
              item.classList.add('hidden');
            });
          } else {
            pagoRemovable.forEach(function (item) {
              let hasInput = item.querySelector('input');
              if (hasInput) {
                hasInput.setAttribute('required', 'required');
              }
              item.classList.remove('hidden');
            });
          }
        }

        $(document).on('keyup change', '#appbundle_contabilidad_facturacion_folioCotizacion', clearData);
      })(jQuery);
    </script>
{% endblock %}