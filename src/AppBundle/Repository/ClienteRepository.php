<?php

namespace AppBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;

/**
 * ClienteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClienteRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $cliente
     *
     * @return float
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getTotalAdeudo($cliente)
    {
        return $this->createQueryBuilder('c')
            ->leftJoin('c.reportes', 'r')
            ->select('SUM(r.adeudo)')
            ->where('c = :cliente')
            ->setParameter('cliente', $cliente)
            ->setMaxResults(1)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param $cliente
     *
     * @return float
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getTotalAbono($cliente)
    {
        return $this->createQueryBuilder('c')
            ->leftJoin('c.reportes', 'r')
            ->select('SUM(r.abono)')
            ->where('c = :cliente')
            ->setParameter('cliente', $cliente)
            ->setMaxResults(1)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getCotizacionesCount($cliente)
    {
        $total = 0;

        try {
            $total += $this->getEntityManager()
                ->createQuery(
                    'SELECT COUNT(cotizacion.id) '.
                    'FROM AppBundle:MarinaHumedaCotizacion cotizacion '.
                    'WHERE IDENTITY(cotizacion.cliente) = ?1 AND cotizacion.validacliente = 2'
                )
                ->setParameter(1, $cliente)
                ->getSingleScalarResult();
        } catch (NonUniqueResultException $e) {
        }

        try {
            $total += $this->getEntityManager()
                ->createQuery(
                    'SELECT COUNT(cotizacion.id) '.
                    'FROM AppBundle:AstilleroCotizacion cotizacion '.
                    'WHERE IDENTITY(cotizacion.cliente) = ?1 AND cotizacion.validacliente = 2'
                )
                ->setParameter(1, $cliente)
                ->getSingleScalarResult();
        } catch (NonUniqueResultException $e) {
        }

        try {
            $total += $this->getEntityManager()
                ->createQuery(
                    'SELECT COUNT(cotizacion.id) '.
                    'FROM AppBundle:Combustible cotizacion '.
                    'WHERE IDENTITY(cotizacion.cliente) = ?1 AND cotizacion.validacliente = 2'
                )
                ->setParameter(1, $cliente)
                ->getSingleScalarResult();
        } catch (NonUniqueResultException $e) {
        }

        return $total;
    }

    public function getAllWhereNombreLike($queryString)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT cliente.id, cliente.nombre AS text '.
                'FROM AppBundle:Cliente cliente '.
                'LEFT JOIN cliente.barcos barcos '.
                'LEFT JOIN cliente.razonesSociales razonSocial '.
                'WHERE LOWER(cliente.nombre) LIKE :cliente '.
                'OR LOWER(barcos.nombre) LIKE :cliente '.
                'OR LOWER(razonSocial.razonSocial) LIKE :cliente '.
                'GROUP BY cliente.id'
            )
            ->setParameter('cliente', strtolower("%{$queryString}%"))
            ->setMaxResults(10)
            ->getArrayResult();
    }
}
